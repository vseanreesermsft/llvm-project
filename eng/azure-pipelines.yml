trigger:
  batch: true
  branches:
    include:
    - dotnet/main*
    - dotnet/release/*

pr: none

variables:
- template: /eng/common-variables.yml@self
- template: /eng/common/templates-official/variables/pool-providers.yml@self
# disable CodeQL here, we have a separate pipeline for it
- name: Codeql.Enabled
  value: false

resources:
  repositories:
  - repository: 1ESPipelineTemplates
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release

parameters:
- name: linuxBuilds
  type: object
  default:
  - arch: x64
    assetManifestOS: linux
    imagename: mariner2crossamd64
    rootfs: /crossrootfs/x64
    ExtraArgs: -p:LibsRoot=/crossrootfs/x64/usr/lib/x86_64-linux-gnu
    ClangTargetArg: /p:ClangTarget=x86_64-linux-gnu
    ClangBinDirArg: /p:ClangBinDir=/usr/local/bin
  - arch: arm64
    assetManifestOS: linux
    imagename: mariner2crossarm64
    rootfs: /crossrootfs/arm64
    ExtraArgs: -p:LibsRoot=/crossrootfs/arm64/usr/lib/aarch64-linux-gnu
    ClangTargetArg: /p:ClangTarget=aarch64-linux-gnu
    ClangBinDirArg: /p:ClangBinDir=/usr/local/bin
  - arch: arm
    assetManifestOS: linux
    imagename: mariner2crossarm
    rootfs: /crossrootfs/arm
    ExtraArgs: -p:LibsRoot=/crossrootfs/arm/usr/lib/arm-linux-gnueabihf
    ClangTargetArg: /p:ClangTarget=arm-linux-gnueabihf
    ClangBinDirArg: /p:ClangBinDir=/usr/local/bin
  - arch: x64
    assetManifestOS: linux-musl
    imagename: mariner2crossamd64alpine
    rootfs: /crossrootfs/x64
    ExtraArgs: -p:LibsRoot=/crossrootfs/x64/lib -p:OutputRid=linux-musl-x64
    ClangTargetArg: /p:ClangTarget=x86_64-alpine-linux-musl
    ClangBinDirArg: /p:ClangBinDir=/usr/local/bin
  - arch: arm64
    assetManifestOS: linux-musl
    imagename: mariner2crossarm64alpine
    rootfs: /crossrootfs/arm64
    ExtraArgs: -p:LibsRoot=/crossrootfs/arm64/lib -p:OutputRid=linux-musl-arm64
    ClangTargetArg: /p:ClangTarget=aarch64-alpine-linux-musl
    ClangBinDirArg: /p:ClangBinDir=/usr/local/bin
- name: macBuilds
  type: object
  default:
  - arch: x64
    ClangTargetArg: /p:ClangTarget=x86_64-apple-darwin
  - arch: arm64
    ClangTargetArg: /p:ClangTarget=aarch64-apple-darwin
- name: windowsBuilds
  type: object
  default:
  - arch: x64
    BuildConfig: Release
  - arch: arm64
    BuildConfig: Release
  - arch: x64
    BuildConfig: Debug
  - arch: arm64
    BuildConfig: Debug

extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    sdl:
      sourceAnalysisPool:
        name: $(DncEngInternalBuildPool)
        image: 1es-windows-2022
        os: windows
    containers:
      mariner2crossamd64:
        image: mcr.microsoft.com/dotnet-buildtools/prereqs:cbl-mariner-2.0-cross-amd64
      mariner2crossarm64:
        image: mcr.microsoft.com/dotnet-buildtools/prereqs:cbl-mariner-2.0-cross-arm64
      mariner2crossarm:
        image: mcr.microsoft.com/dotnet-buildtools/prereqs:cbl-mariner-2.0-cross-arm
      mariner2crossamd64alpine:
        image: mcr.microsoft.com/dotnet-buildtools/prereqs:cbl-mariner-2.0-cross-amd64-alpine
      mariner2crossarm64alpine:
        image: mcr.microsoft.com/dotnet-buildtools/prereqs:cbl-mariner-2.0-cross-arm64-alpine
      almalinux8sourcebuild:
        image: mcr.microsoft.com/dotnet-buildtools/prereqs:almalinux-8-source-build
    stages:
    - stage: build
      displayName: Build
      jobs:
      - template: /eng/common/templates-official/jobs/jobs.yml@self
        parameters:
          enablePublishBuildArtifacts: true
          enablePublishBuildAssets: true
          enablePublishUsingPipelines: true
          enableSourceBuild: true
          sourceBuildParameters:
            platforms:
            - name: 'AlmaLinux_8_Portable'
              container: almalinux8sourcebuild
              jobProperties:
                timeoutInMinutes: 600
          jobs:

          ############ LINUX BUILD ############
          - ${{ each buildjob in parameters.linuxBuilds }}:
            - job: Build_${{ replace(buildjob.assetManifestOS, '-', '_') }}_${{ buildjob.arch }}
              displayName: ${{ buildjob.assetManifestOS }} ${{ buildjob.arch }}
              timeoutInMinutes: 600
              variables:
              - _BuildConfig: Release
              pool:
                name: $(DncEngInternalBuildPool)
                image: 1es-ubuntu-2204
                os: linux
              container: ${{ buildjob.imagename }}
              steps:
              - bash: |
                  set -ex
                  git clean -ffdx
                  git reset --hard HEAD
                displayName: 'Clean up working directory'

              - bash: |
                  ./build.sh --ci --restore --build --pack --arch ${{ buildjob.arch }} --configuration $(_BuildConfig) $(_InternalBuildArgs) ${{ buildjob.ClangBinDirArg }} ${{ buildjob.ClangTargetArg }} ${{ buildjob.ExtraArgs }}
                displayName: 'Build and package'
                env:
                  ROOTFS_DIR: ${{ buildjob.rootfs }}

              - bash: |
                  ./eng/common/build.sh --ci --restore --publish --configuration $(_BuildConfig) $(_InternalBuildArgs) /p:AssetManifestOS=${{ buildjob.assetManifestOS }} /p:PlatformName=${{ buildjob.arch }} --projects $(Build.SourcesDirectory)/llvm.proj
                displayName: Publish packages
                condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

          ############ MACOS BUILD ############
          - ${{ each buildjob in parameters.macBuilds }}:
            - job: Build_macOS_${{ buildjob.arch }}
              displayName: macOS ${{ buildjob.arch }}
              timeoutInMinutes: 600
              variables:
              - _BuildConfig: Release
              pool:
                name: Azure Pipelines
                vmImage: macos-13
                os: macOS
              steps:
              - bash: |
                  set -ex
                  git clean -ffdx
                  git reset --hard HEAD
                displayName: 'Clean up working directory'

              - bash: |
                  ./build.sh --ci --restore --build --pack --arch ${{ buildjob.arch }} --configuration $(_BuildConfig) ${{ buildjob.ClangTargetArg }} $(_InternalBuildArgs)
                displayName: 'Build and package'

              - bash: |
                  ./eng/common/build.sh --ci --restore --publish --configuration $(_BuildConfig) $(_InternalBuildArgs) /p:AssetManifestOS=osx /p:PlatformName=${{ buildjob.arch }} --projects $(Build.SourcesDirectory)/llvm.proj
                displayName: Publish packages
                condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

          ############ WINDOWS BUILD ############
          - ${{ each buildjob in parameters.windowsBuilds }}:
            - job: Build_Windows_${{ buildjob.arch }}_${{ buildjob.BuildConfig }}
              displayName: Windows ${{ buildjob.arch }} ${{ buildjob.BuildConfig }}
              timeoutInMinutes: 600
              variables:
                - _BuildConfig: ${{ buildjob.BuildConfig }}
              pool:
                name: $(DncEngInternalBuildPool)
                image: windows.vs2022.amd64
                os: windows
              steps:
              - checkout: self
                clean: true
                fetchDepth: 2

              - script: |
                  git clean -ffdx
                  git reset --hard HEAD
                displayName: 'Clean up working directory'

              - powershell: eng\build.ps1 -ci -restore -build -arch x64 -configuration $(_BuildConfig) $(_InternalBuildArgs) /p:BuildLLVMTableGenOnly=true
                displayName: 'Build host llvm-tblgen for cross-compiling'

              - powershell: eng\build.ps1 -ci -restore -build -pack -arch ${{ buildjob.arch }} -configuration $(_BuildConfig) $(_InternalBuildArgs) /p:NativeTablegenDir=$(Build.SourcesDirectory)\artifacts\obj\BuildRoot-x64\bin
                displayName: 'Build and package'

              - powershell: eng\common\build.ps1 -ci -restore -publish -configuration $(_BuildConfig) $(_InternalBuildArgs) /p:AssetManifestOS=$(_BuildConfig)-win /p:PlatformName=${{ buildjob.arch }} -projects $(Build.SourcesDirectory)\llvm.proj
                displayName: Publish packages
                condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

    ############ POST BUILD ARCADE LOGIC ############
    - template: /eng/common/templates-official/post-build/post-build.yml@self
      parameters:
        enableSourceLinkValidation: false
        enableSigningValidation: false
        enableSymbolValidation: false
        enableNugetValidation: true
